name: backend CI Config

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main
      
permissions:
  pull-requests: write
  checks: write

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      JWT_EXPIRATION_PERIOD: ${{ secrets.JWT_EXPIRATION_PERIOD }}
      JWT_HEADER: ${{ secrets.JWT_HEADER }}
      JWT_PREFIX: ${{ secrets.JWT_PREFIX }}
      JWT_REFRESH_TOKEN_VALID_TIME: ${{ secrets.JWT_REFRESH_TOKEN_VALID_TIME }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Set up Repository
        uses: actions/checkout@v3

      - name: ✨ JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: ✨ Gradle 의존성 캐싱
        uses: actions/cache@v3
        with:
          path: |  
              ~/.gradle/caches
              ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
              ${{ runner.os }}-gradle-
              
      - name: ✨ Gradlew 권한 설정
        run: chmod +x ./gradlew
        working-directory: ${{ env.working-directory }}

      - name: ✨ Build JAR File
        run: ./gradlew build
        working-directory: ${{ env.working-directory }}

      - name: ✨ 테스트 진행
        run: ./gradlew test
        working-directory: ${{ env.working-directory }}

      - name: ✨ 테스트 결과 Report
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ always() }}
        with:
          files: '**/build/test-results/**/*.xml'

      - name: ✨ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: ✨ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: ✨ notificate on slack if build failed
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 백엔드 빌드 결과 알림
          fields: repo, message, commit, author, action, eventName, ref, workflow, job, took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_BACKEND }}
        if: always()

      - name: ✨ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: with-you
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
